// <auto-generated />
using System;
using GamingTournamentPlatform.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GamingTournamentPlatform.Infrastructure.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("LeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TeamUserApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Inventation")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUserApplications");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Inventation")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegistrationInfoId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationInfoId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentApplication");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCreatingTeams")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowOrganizeCompetitions")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TournamentCategories");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentRegistrationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfParticipants")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId")
                        .IsUnique();

                    b.ToTable("TournamentRegistrationInfo");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentStage");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentTeamRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FirstParticipantId")
                        .HasColumnType("integer");

                    b.Property<bool?>("FirstParticipantWon")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("NextRoundId")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentStageId")
                        .HasColumnType("integer");

                    b.Property<string>("YoutubeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("NextRoundId");

                    b.HasIndex("SecondParticipantId");

                    b.HasIndex("TournamentStageId");

                    b.ToTable("TournamentTeamRound");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentUserRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FirstParticipantId")
                        .HasColumnType("integer");

                    b.Property<bool?>("FirstParticipantWon")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("NextRoundId")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentStageId")
                        .HasColumnType("integer");

                    b.Property<string>("YoutubeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("NextRoundId");

                    b.HasIndex("SecondParticipantId");

                    b.HasIndex("TournamentStageId");

                    b.ToTable("TournamentUserRound");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.Property<int>("TeamParticipantsId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("TeamParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TeamTournament");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamsId")
                        .HasColumnType("integer");

                    b.HasKey("ParticipantsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserParticipantsId")
                        .HasColumnType("integer");

                    b.HasKey("TournamentsId", "UserParticipantsId");

                    b.HasIndex("UserParticipantsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.Team", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentCategory", "Category")
                        .WithMany("Teams")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", "Leader")
                        .WithMany("LeaderTeams")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TeamUserApplication", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Team", "Team")
                        .WithMany("Applications")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", "User")
                        .WithMany("TeamApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentApplication", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentRegistrationInfo", "RegistrationInfo")
                        .WithMany("TournamentApplications")
                        .HasForeignKey("RegistrationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Team", "Team")
                        .WithMany("TournamentApplications")
                        .HasForeignKey("TeamId");

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", "User")
                        .WithMany("TournamentApplications")
                        .HasForeignKey("UserId");

                    b.Navigation("RegistrationInfo");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentCategory", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentRegistrationInfo", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Tournament", "Tournament")
                        .WithOne("RegistrationInfo")
                        .HasForeignKey("GamingTournamentPlatform.Domain.Entities.TournamentRegistrationInfo", "TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentStage", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Stages")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentTeamRound", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Team", "FirstParticipant")
                        .WithMany()
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentTeamRound", "NextRound")
                        .WithMany()
                        .HasForeignKey("NextRoundId");

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Team", "SecondParticipant")
                        .WithMany()
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentStage", "TournamentStage")
                        .WithMany("TournamentTeamRounds")
                        .HasForeignKey("TournamentStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("NextRound");

                    b.Navigation("SecondParticipant");

                    b.Navigation("TournamentStage");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentUserRound", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", "FirstParticipant")
                        .WithMany()
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentUserRound", "NextRound")
                        .WithMany()
                        .HasForeignKey("NextRoundId");

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", "SecondParticipant")
                        .WithMany()
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.TournamentStage", "TournamentStage")
                        .WithMany("TournamentUserRounds")
                        .HasForeignKey("TournamentStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("NextRound");

                    b.Navigation("SecondParticipant");

                    b.Navigation("TournamentStage");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("GamingTournamentPlatform.Domain.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingTournamentPlatform.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.Team", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("TournamentApplications");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("RegistrationInfo");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentRegistrationInfo", b =>
                {
                    b.Navigation("TournamentApplications");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.TournamentStage", b =>
                {
                    b.Navigation("TournamentTeamRounds");

                    b.Navigation("TournamentUserRounds");
                });

            modelBuilder.Entity("GamingTournamentPlatform.Domain.Entities.User", b =>
                {
                    b.Navigation("LeaderTeams");

                    b.Navigation("TeamApplications");

                    b.Navigation("TournamentApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
